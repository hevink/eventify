// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
  ORGANIZER
}

model User {
  id                      String                 @id @default(cuid()) @map("_id")
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmationId String?
  role                    UserRole               @default(USER)
  accounts                Account[]
  towFactorConfirmation   TwoFactorConfirmation?
  events                  Event[]
  // passes                  Pass[]
  // reviews                 Review[]
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Event {
  id          String    @id @default(cuid()) @map("_id")
  eventId     String
  name        String
  date        DateTime?
  organizer   String
  description String
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  price       String
  User        User      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  //? Location fields
  city        String
  pin         String
  state       String
  country     String
  street      String
  //
  // capacity             Int?
  // isPublic             Boolean
  // registrationDeadline DateTime?
  // categories           String[]
  // speakers             String
  // agenda               String?
  // duration             Int?
  // registrationLink     String?
  // livestreamLink       String?
  // tags                 String[]
  // featured             Boolean?
  // Pass                 Pass[]
  // Review      Review[]
}

// model Pass {
//   id          String   @id @default(cuid()) @map("_id")
//   passId      String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   price       String
//   isPurchased Boolean  @default(false)
//   eventId     String
//   userId      String
//   event       Event    @relation(fields: [eventId], references: [id])
//   user        User     @relation(fields: [userId], references: [id])
// }

// model Review {
//   id        String   @id @default(cuid()) @map("_id")
//   rating    Float
//   comment   String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   eventId   String
//   event     Event    @relation(fields: [eventId], references: [id])
//   userId    String
//   user      User     @relation(fields: [userId], references: [id])
// }
